<style lang="scss">
.tips-login-needed {
  position: absolute;
  width: 100%;
  height: calc(100%);
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  justify-content: center;
  left: 0;
  top: 0;

  #loginBtn {
    display: flex;
    align-items: center;
    justify-content: center;
    flex-flow: row nowrap;
    width: 280rpx;
    height: 280rpx;
    border: 1px dashed #ccc;

    font-size: 180rpx;

    position: relative;
    top: -72rpx;
  }
}

.toolbar {
  height: 96rpx;
  width: 100%;

  box-shadow: 0 0 16rpx #ccc;
  border-bottom: 1px solid #ccc;

  display: flex;
  flex-flow: row nowrap;

  .toolbar-item {
    flex: 1;
    height: 96rpx;
    line-height: 96rpx;
    text-align: center;

    border-bottom: 1px solid transparent;

    transition: border-bottom 0.3s, color 0.3s;
    font-size: 32rpx;

    &.active {
      color: #47b248;
      border-bottom: 1px solid #47b248;
    }
  }
}

.orders {
  height: calc(100% - 96rpx);
  width: 100%;
  box-sizing: border-box;
  overflow: auto;
  position: relative;
  box-sizing: border-box;
  padding: 0 16rpx;
  background-color: #e5e5e5;

  .orders-item {
    position: relative;
    width: 100%;
    box-sizing: border-box;
    padding: 32rpx;
    background-color: white;
    border-radius: 16rpx;
    margin: 16rpx 0;

    .orders-item-top {
      display: flex;

      align-items: center;
      flex-flow: row nowrap;
      justify-content: space-between;

      padding-bottom: 32rpx;
      border-bottom: 1px solid #ccc;

      image {
        margin-right: 32rpx;
        display: inline-block;
        width: 96rpx;
        height: 96rpx;
      }

      .orders-item-status {
        &[data-status='0'] {
          color: grey;
        }
        &[data-status='1'] {
          color: deepskyblue;
        }
        &[data-status='2'] {
          color: #47b248;
        }
        &[data-status='3'] {
          color: orangered;
        }
        &[data-status='4'] {
          color: red;
        }
      }

      .orders-item-name {
        display: flex;
        align-items: center;
        flex-flow: row nowrap;
        max-width: 480rpx;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
    }

    .orders-item-details {
      padding-left: 128rpx;

      .orders-item-details-row {
        padding: 16rpx 0;
        font-size: 32rpx;
        color: #888;
        display: flex;
        flex-flow: row nowrap;
        align-items: center;

        text {
          &:nth-child(1) {
            flex: 1;
            max-width: 450rpx;
            white-space: nowrap;
            text-overflow: ellipsis;
            overflow: hidden;
          }
        }

        &:last-child {
          border-bottom: 1px solid #ccc;
        }
      }
    }

    .orders-item-action {
      padding-top: 32rpx;
      text-align: right;

      button {
        display: inline-block;
        font-size: 24rpx;
        margin-left: 32rpx;
      }
    }
  }
}
</style>
<template>
  <view class="container">

    <view wx:if="{{!userCheck}}" class="tips-login-needed">

      <view>
        <image id="loginBtn" src="{{loginImg}}" @tap="handleToLogin"></image>
      </view>
      <view>
        <icon style="position: relative; top: 6rpx; margin-right: 16rpx;" type="info" size="16"/><text>您还未登录</text>
      </view>

    </view>

    
    <view class="toolbar" wx:if="{{userCheck}}">
      <view 
        wx:for="{{toolbars}}" 
        class="toolbar-item {{item.checked ? 'active' : ''}}" 
        wx:key="toolbar-item-{{idx}}"
        @tap="handleToolbarChange({{item}})">
        <text>{{item.label}}</text>
      </view>
    </view>

    <scroll-view class="orders" scroll-y wx:if="{{userCheck}}" bindscrolltolower="handleLoadMore">
      <view 
        wx:for="{{orders}}" 
        wx:key="orders-item-{{idx}}"
        class="orders-item">

        <view class="orders-item-top">

          <view class="orders-item-name" @tap="handleToBI({{item}})">
            <image src="{{item.avatar}}"></image>
            <text>{{item.businessName}}&gt;</text>
          </view>
          <text class="orders-item-status" data-status="{{item.status}}">{{item.statusValue}}</text>

        </view>
        <view class="orders-item-details">

          <view class="orders-item-details-row" 
            wx:for="{{item.details}}"
            wx:for-index="sidx" 
            wx:for-item="sitem"
            wx:key="orders-item-details-row-{{sidx}}">

            <text>{{sitem.name}}</text>
            <text>x{{sitem.counts}}</text>

          </view>

        </view>
        <view class="orders-item-action">
          <button wx:if="{{item.status === 0}}" class="btn-pay" @tap="handlePayOrder({{item}})">支付</button>
          <button wx:if="{{item.status === 0 || item.status === 1}}" class="btn-cancel" @tap="handleCancelOrder({{item}})" type="warn">取消</button>
          <button wx:if="{{item.status === 1}}" type="primary" class="btn-finish" @tap="handleFinishOrder({{item}})">完成</button>
        </view>

      </view>

      <view wx:if="{{ordersLength <= 0}}" style="text-align: center; font-size: 28rpx; color: #888; padding: 32rpx;">
        空空如也(*/ω＼*)
      </view>

      <LoadMore wx:if="{{ordersLength > 0}}" :loadingMore.sync="loadingMore" :hasMore.sync="hasMore"/>

    </scroll-view>

  </view>
</template>

<script>
import wepy from 'wepy';

import { connect } from 'wepy-redux';

import { getStore } from 'wepy-redux';
import {
  asyncGetOrders,
  asyncGetMoreOrders,
  asyncPayOrder,
  asyncCancelOrder,
  asyncFinishOrder,
  asyncSearchBusiness
} from '@/store/actions';

import { BASE_API } from '@/const/config';

import LoadMore from '@/components/loadmore';

const STATUS_VALUE = {
  '0': '发起',
  '1': '已支付',
  '2': '已完成',
  '3': '取消中',
  '4': '已取消'
};

@connect(
  {
    userId(state) {
      return state.user.id;
    },
    userCheck(state) {
      return state.user.check;
    },
    orders(state) {
      return state.order.orders.map(order => ({
        ...order,
        details: JSON.parse(order.details),
        businessName: order.receiver_info.nickname,
        avatar: order.receiver_info.avatar
          ? BASE_API + order.receiver_info.avatar
          : '/assets/imgs/avatar.png',
        statusValue: STATUS_VALUE['' + order.status]
      }));
    },
    ordersLength(state) {
      return state.order.orders.length;
    }
  },
  {}
)
export default class Order extends wepy.page {
  config = {
    navigationBarTitleText: '我的订单',
    enablePullDownRefresh: true
  };
  components = {
    LoadMore
  };

  mixins = [];

  data = {
    loginImg: '/assets/imgs/login.png',
    toolbars: [
      { label: '进行中', checked: true, value: [0, 1, 3] },
      { label: '已完成', checked: false, value: [2] },
      { label: '已取消', checked: false, value: [4] }
    ],
    pageSize: 5,
    pageNo: 1,
    status: [0, 1, 3],
    loadingMore: false,
    hasMore: true
  };

  computed = {};

  methods = {
    handleToLogin() {
      wepy.navigateTo({
        url: '/pages/login'
      });
    },
    handleToolbarChange(item) {
      this.toolbars.forEach(t => {
        if (t.label === item.label) {
          t.checked = true;
        } else {
          t.checked = false;
        }
      });

      this.status = item.value;
      this.pageNo = 1;
      this.loadOrders();
    },
    handleLoadMore() {
      const ctx = this;

      if (!ctx.hasMore || ctx.loadingMore) {
        return;
      }

      ctx.pageNo++;

      ctx.loadingMore = true;
      getStore()
        .dispatch(
          asyncGetMoreOrders({
            token: wepy.getStorageSync('token'),
            status: ctx.status,
            pageSize: ctx.pageSize,
            pageNo: ctx.pageNo
          })
        )
        .then(res => {
          wepy.stopPullDownRefresh();
          ctx.loadingMore = false;
          ctx.$apply();

          if (res.error) {
            wepy.showToast({
              title: res.payload.message,
              icon: 'none'
            });
            return;
          }

          if ((res.payload.data || []).length < ctx.pageSize) {
            ctx.hasMore = false;
          } else {
            ctx.hasMore = true;
          }
          ctx.$apply();
        });
    },
    handlePayOrder(item) {
      const ctx = this;
      wepy.showModal({
        title: '提示',
        content: '是否确认支付该订单?',
        success(res) {
          if (!res.confirm) {
            return;
          }

          wepy.showLoading({
            title: '支付中'
          });
          getStore()
            .dispatch(
              asyncPayOrder({
                token: wepy.getStorageSync('token'),
                id: item.id
              })
            )
            .then(res => {
              wepy.hideLoading();
              if (res.error) {
                wepy.showModal({
                  title: '支付失败',
                  content: res.payload.message,
                  showCancel: false
                });
                return;
              }

              ctx.pageNo = 1;
              ctx.$apply();
              ctx.loadOrders();
            });
        }
      });
    },
    handleCancelOrder(item) {
      const ctx = this;
      wepy.showModal({
        title: '提示',
        content: '是否确认取消该订单?',
        success(res) {
          if (!res.confirm) {
            return;
          }

          wepy.showLoading({
            title: '取消中'
          });
          getStore()
            .dispatch(
              asyncCancelOrder({
                token: wepy.getStorageSync('token'),
                id: item.id
              })
            )
            .then(res => {
              wepy.hideLoading();
              if (res.error) {
                wepy.showModal({
                  title: '取消失败',
                  content: res.payload.message,
                  showCancel: false
                });
                return;
              }

              ctx.pageNo = 1;
              ctx.$apply();
              ctx.loadOrders();
            });
        }
      });
    },
    handleFinishOrder(item) {
      const ctx = this;
      wepy.showModal({
        title: '提示',
        content: '是否确认该订单已完成?',
        success(res) {
          if (!res.confirm) {
            return;
          }

          wepy.showLoading({
            title: '提交中'
          });
          getStore()
            .dispatch(
              asyncFinishOrder({
                token: wepy.getStorageSync('token'),
                id: item.id
              })
            )
            .then(res => {
              wepy.hideLoading();
              if (res.error) {
                wepy.showModal({
                  title: '提交失败',
                  content: res.payload.message,
                  showCancel: false
                });
                return;
              }

              ctx.pageNo = 1;
              ctx.$apply();
              ctx.loadOrders();
            });
        }
      });
    },
    handleToBI(item) {
      getStore()
        .dispatch(asyncSearchBusiness(item.receiver_id))
        .then(res => {
          if (res.error) {
            wepy.showModal({
              title: '提示',
              showCancel: false,
              content: res.payload.message
            });
          } else {
            wepy.navigateTo({
              url: '/pages/business_info'
            });
          }
        });
    }
  };

  onPullDownRefresh() {
    const ctx = this;

    ctx.pageNo = 1;
    ctx.$apply();

    ctx.loadOrders();
  }

  loadOrders(fb) {
    const ctx = this;

    wepy.showLoading({
      title: '加载中'
    });
    getStore()
      .dispatch(
        asyncGetOrders({
          token: wepy.getStorageSync('token'),
          status: ctx.status,
          pageSize: ctx.pageSize,
          pageNo: ctx.pageNo
        })
      )
      .then(res => {
        wepy.hideLoading();
        wepy.stopPullDownRefresh();
        if (res.error) {
          wepy.showToast({
            title: res.payload.message,
            icon: 'none'
          });
          return;
        }

        if ((res.payload.data || []).length < ctx.pageSize) {
          ctx.hasMore = false;
        } else {
          ctx.hasMore = true;
        }

        ctx.loadingMore = false;
        ctx.$apply();
      });
  }

  events = {};

  onShow() {
    this.loadOrders();
  }
}
</script>
