<style lang="scss">
.banner {
  position: relative;
  height: 320rpx;

  .banner-item {
    height: 320rpx;
    width: 100%;
  }

  #avatar {
    position: absolute;
    left: 24rpx;
    bottom: -42rpx;
    width: 156rpx;
    height: 156rpx;
    border-radius: 24rpx;
    background-color: white;
    box-shadow: 0 0 16rpx #ccc;
  }
}

.main {
  height: calc(100% - 320rpx);
  overflow: hidden;
  position: relative;
  .recipe-categories {
    position: absolute;
    left: 0;
    top: 0;
    width: 30%;
    height: calc(100%);
    overflow-x: hidden;
    overflow-y: auto;

    box-sizing: border-box;
    border-right: 1px solid #ccc;

    padding-top: 72rpx;

    .recipe-categories-item {
      padding: 24rpx;
      text-align: center;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis;

      transition: background-color 0.3s, color 0.3s;

      &.active {
        background-color: #47b248;
        color: white;
      }
    }
  }

  .recipes {
    position: absolute;
    left: 30%;
    width: 70%;
    height: calc(100%);
    overflow-x: hidden;
    overflow-y: auto;

    box-sizing: border-box;
    padding-bottom: 224rpx;

    .recipes-item {
      padding: 16rpx;

      display: flex;

      flex-flow: row nowrap;

      border-bottom: 1px dashed #ccc;

      .recipes-item-img {
        width: 112rpx;
        height: 112rpx;

        min-width: 112rpx;

        margin-right: 16rpx;

        image {
          max-width: 100%;
          max-height: 100%;
          width: 100%;
          height: 100%;
        }
      }

      .recipes-item-main {
        flex: 1;

        .recipes-item-title {
          font-size: 42rpx;
          overflow: hidden;
          white-space: nowrap;
          text-overflow: ellipsis;
          max-width: 328rpx;
        }

        .recipes-item-action {
          margin-top: 16rpx;
          display: flex;
          flex-flow: row nowrap;
          align-items: center;
          justify-content: space-between;

          .recipes-item-price {
            color: #47b248;
          }

          .recipes-item-btn {
            display: inline-block;
            background-color: #47b248;
            width: 48rpx;
            height: 48rpx;
            text-align: center;
            line-height: 48rpx;
            border-radius: 50%;
            margin: 0 16rpx;
            color: white;
          }
        }
      }
    }
  }
}

#cartBtn {
  position: absolute;
  z-index: 999;

  width: 128rpx;
  height: 128rpx;

  bottom: 48rpx;
  right: 48rpx;

  background: white;
  border-radius: 50%;

  box-shadow: 0 0 16rpx #ccc;

  color: white;

  #cartBtnTips {
    position: absolute;
    top: -16rpx;
    right: -16rpx;
    width: 56rpx;
    height: 56rpx;
    text-align: center;
    line-height: 56rpx;
    z-index: 9999;
    background: #47b248;
    border-radius: 50%;
  }

  image {
    width: 100%;
    height: 100%;
  }
}
</style>
<template>
  <view class="container">
    <view class="banner">

      <swiper indicator-dots="{{bannerSetting.indicatorDots}}"
        autoplay="{{bannerSetting.autoplay}}" interval="{{bannerSetting.interval}}" duration="{{bannerSetting.duration}}">
        <block wx:for="{{businessBanners}}" wx:key="banner-item-{{idx}}">
          <swiper-item>
            <image src="{{item}}" class="banner-item" mode="aspectFill"/>
          </swiper-item>
        </block>
      </swiper>

      <image id="avatar" src="{{businessAvatar}}" mode="aspectFill"></image>

    </view>
    <view class="main">

      <view class="recipe-categories">

        <view 
          class="recipe-categories-item {{item.checked ? 'active': ''}}"
          @tap="handleRCClick({{item}})"
          wx:for="{{recipeCategories}}"
          wx:key="recipe-categories-item-{{idx}}">

          <text>{{item.name}}</text>

        </view>

      </view>
      <view class="recipes">

        <view class="recipes-item"
          wx:for="{{recipes}}"
          wx:key="recipes-item-{{idx}}">

          <view class="recipes-item-img">
            <image src="{{item.info.avatar}}"/>
          </view>
          <view class="recipes-item-main">
            <view class="recipes-item-title">
              {{item.info.name}}
            </view>
            <view class="recipes-item-action">
              <view class="recipes-item-price">
                ￥{{item.info.price}}
              </view>
              <view>
                <view class="recipes-item-btn" wx:if="{{item.counts > 0}}" @tap="minusRecipeInCart({{item.info}})">-</view>
                <text wx:if="{{item.counts > 0}}">{{item.counts}}</text>
                <view class="recipes-item-btn" @tap="plusRecipeInCart({{item.info}})">+</view>
              </view>
            </view>

          </view>


        </view>

      </view>

    </view>

    <view id id="cartBtn" wx:if="{{countsOfRecipesInCart > 0}}" @tap="handleNavigate2Cart">
      <image src="../assets/icons/cart.png" mode="aspectFill"></image>
      <view id="cartBtnTips">{{countsOfRecipesInCart}}</view>
    </view>

  </view>
</template>

<script>
import wepy from 'wepy';
import { connect } from 'wepy-redux';

import { getStore } from 'wepy-redux';

import {
  asyncGetRecipeCategories,
  asyncSetRecipeCategoryChecked,
  asyncGetAllRecipes,
  asyncGetRecipesWithCategoryId,
  asyncPlusRecipeInCart,
  asyncMinusRecipeInCart
} from '@/store/actions';

import { BASE_API } from '@/const/config';
@connect(
  {
    businessId(state) {
      return state.user.business.id;
    },
    businessName(state) {
      return state.user.business.userInfo.nickname;
    },
    businessAvatar(state) {
      const avatar = state.user.business.userInfo.avatar;
      return avatar ? BASE_API + avatar : '../assets/imgs/avatar.png';
    },
    businessBanners(state) {
      const t = state.user.business.userInfo.banner;
      const res = t
        ? t
            .split(',')
            .filter(b => !!b)
            .map(b => BASE_API + b)
        : ['../assets/imgs/banner.png'];

      return res;
    },
    recipeCategories(state) {
      return state.recipeCategory.recipeCategories;
    },
    recipes(state) {
      return state.recipe.recipes.map(r => ({
        info: {
          ...r,
          avatar: BASE_API + r.avatar
        },
        counts: state.recipe.recipesInCart['' + r.id] ? state.recipe.recipesInCart['' + r.id].counts : 0
      }));
    },
    countsOfRecipesInCart(state) {
      const recipesInCart = state.recipe.recipesInCart;
      let counts = 0;
      for (let key in recipesInCart) {
        counts += recipesInCart[key].counts;
      }

      return counts;
    }
  },
  {
    plusRecipeInCart: asyncPlusRecipeInCart,
    minusRecipeInCart: asyncMinusRecipeInCart
  }
)
export default class Business extends wepy.page {
  config = {
    navigationBarTitleText: '店家'
  };
  data = {
    bannerSetting: {
      indicatorDots: false,
      autoplay: true,
      interval: 5000,
      duration: 500
    },
    cartBtnTips: '',
    showCartBtn: false
  };

  components = {};

  mixins = [];

  computed = {};

  methods = {
    handleNavigate2Cart() {
      wepy.navigateTo({
        url: '/pages/cart'
      });
    },

    handleRCClick(rc) {
      const ctx = this;

      getStore().dispatch(asyncSetRecipeCategoryChecked(rc.value));
      if (rc.all) {
        ctx.loadRecipes();
      } else {
        ctx.loadRecipes(rc.value);
      }
    }
  };

  events = {};

  loadRecipeCategories() {
    const ctx = this;

    getStore()
      .dispatch(asyncGetRecipeCategories(ctx.businessId))
      .then(res => {
        if (res.error) {
          wepy.showModal({
            title: '提示',
            showCancel: false,
            content: res.payload.message
          });
        } else {
        }
      });
  }

  loadRecipes(categoryId) {
    const ctx = this;
    if (categoryId) {
      getStore()
        .dispatch(
          asyncGetRecipesWithCategoryId({
            userId: ctx.businessId,
            categoryId
          })
        )
        .then(res => {
          if (res.error) {
            wepy.showModal({
              title: '提示',
              showCancel: false,
              content: res.payload.message
            });
          } else {
          }
        });
    } else {
      getStore()
        .dispatch(asyncGetAllRecipes(ctx.businessId))
        .then(res => {
          if (res.error) {
            wepy.showModal({
              title: '提示',
              showCancel: false,
              content: res.payload.message
            });
          } else {
          }
        });
    }
  }

  onLoad() {
    this.loadRecipeCategories();
    this.loadRecipes();

    wepy.setNavigationBarTitle({ title: this.businessName });
  }
}
</script>
